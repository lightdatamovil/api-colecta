import { checkIfExistLogisticAsDriverInDue√±aCompany } from "../../functions/checkIfExistLogisticAsDriverInDue√±aCompany.js";
import { informe } from "../../functions/informe.js";
import {
    companiesService,
    hostProductionDb,
    portProductionDb,
    urlAsignacionMicroservice,
    urlEstadosMicroservice,
    axiosInstance,
    rabbitService,
    queueEstadosML,
    urlAltaEnvioMicroservice,
    urlAltaEnvioRedisMicroservice,
} from "../../../../db.js";
import {
    altaEnvioBasica,
    assign,
    connectMySQL,
    CustomException,
    EstadosEnvio,
    getProductionDbConfig,
    LightdataORM,
    sendShipmentStateToStateMicroserviceAPI,
} from "lightdata-tools";
import { logBlue, logGreen, logYellow, logRed } from "lightdata-tools"; // suponiendo que ya existen

export async function handleExternalNoFlex({
    db,
    dataQr,
    company,
    userId,
    profile,
    autoAssign,
    latitude,
    longitude,
}) {
    const globalStart = performance.now();
    logBlue(`üöÄ [handleExternalNoFlex] Iniciando proceso para empresa ${company.did}`);

    const shipmentIdFromDataQr = dataQr.did;
    const clientIdFromDataQr = dataQr.cliente;
    let dbDue√±a;

    try {
        /* üß© 1. Buscar empresa due√±a */
        const t1 = performance.now();
        const companyDue√±a = await companiesService.getById(dataQr.empresa);
        const t2 = performance.now();
        logGreen(`üè¢ Empresa due√±a obtenida (${companyDue√±a.nombre}) en ${(t2 - t1).toFixed(2)} ms`);

        /* üß© 2. Conexi√≥n DB due√±a */
        const dbConfigExt = getProductionDbConfig({
            host: hostProductionDb,
            port: portProductionDb,
            company: companyDue√±a,
        });

        const t3 = performance.now();
        dbDue√±a = await connectMySQL(dbConfigExt);
        const t4 = performance.now();
        logGreen(`üîå Conectado a DB due√±a en ${(t4 - t3).toFixed(2)} ms`);

        /* üß© 3. Obtener cliente */
        const companyClientList = await companiesService.getClientsByCompany({
            db: dbDue√±a,
            companyId: companyDue√±a.did,
        });
        const client = companyClientList[clientIdFromDataQr];
        logBlue(`üë§ Cliente en empresa due√±a: ${client?.nombre}`);

        /* üß© 4. Buscar chofer */
        const driver = await checkIfExistLogisticAsDriverInDue√±aCompany({
            db: dbDue√±a,
            syncCode: company.codigo,
        });
        if (!driver) {
            logYellow("‚ö†Ô∏è No se encontr√≥ chofer asignado");
            return { success: false, message: "No se encontr√≥ chofer asignado" };
        }

        /* üß© 5. Buscar cliente vinculado */
        const [rowDue√±aClient] = await LightdataORM.select({
            dbConnection: db,
            table: "clientes",
            where: { codigoVinculacionLogE: companyDue√±a.codigo },
            select: ["did"],
            throwIfNotExists: true,
        });

        /* üß© 6. Buscar si ya existe env√≠o */
        let encargadaShipmentId;
        const [rowEncargadaShipmentId] = await LightdataORM.select({
            dbConnection: db,
            table: "envios_exteriores",
            where: { didExterno: shipmentIdFromDataQr },
            select: ["didLocal"],
        });

        if (rowEncargadaShipmentId) {
            encargadaShipmentId = rowEncargadaShipmentId.didLocal;
            logBlue(`üì¶ Env√≠o externo ya existente ‚Üí ${encargadaShipmentId}`);
        } else {
            const startAlta = performance.now();
            encargadaShipmentId = await altaEnvioBasica({
                urlAltaEnvioMicroservice,
                urlAltaEnvioRedisMicroservice,
                axiosInstance,
                rabbitServiceInstance: rabbitService,
                queueEstadosML,
                company,
                clientId: rowDue√±aClient.did,
                accountId: 0,
                dataQr,
                flex: 0,
                externo: 1,
                userId,
                driverId: driver,
                lote: "colecta",
                didExterno: shipmentIdFromDataQr,
                nombreClienteEnEmpresaDue√±a: client.nombre,
                empresaDue√±a: companyDue√±a.did,
            });
            const endAlta = performance.now();
            logGreen(`‚úÖ altaEnvioBasica completado en ${(endAlta - startAlta).toFixed(2)} ms`);
        }

        /* üß© 7. Asignar a empresa due√±a */
        const startAssignDue√±a = performance.now();
        logBlue(urlAsignacionMicroservice);
        await assign({
            url: urlAsignacionMicroservice,
            companyId: dataQr.empresa,
            userId,
            profile,
            dataQr,
            driverId: driver,
            deviceFrom: "Autoasignado de colecta",
        });
        const endAssignDue√±a = performance.now();
        logGreen(`üìÆ Asignaci√≥n a empresa due√±a en ${(endAssignDue√±a - startAssignDue√±a).toFixed(2)} ms`);

        /* üß© 8. Asignar a interna si corresponde */
        if (autoAssign) {
            const startAssignInterna = performance.now();
            const dqr = {
                interno: dataQr.interno,
                did: encargadaShipmentId,
                cliente: clientIdFromDataQr,
                empresa: company.did,
            };

            await assign({
                url: urlAsignacionMicroservice,
                companyId: company.did,
                userId,
                profile,
                dqr,
                driverId: userId,
                deviceFrom: "Autoasignado de colecta",
            });
            const endAssignInterna = performance.now();
            logGreen(`üìÆ Asignaci√≥n interna completada en ${(endAssignInterna - startAssignInterna).toFixed(2)} ms`);
        }

        /* üß© 9. Log√≠stica inversa */
        const startInv = performance.now();
        const [rowLogisticaInversa] = await LightdataORM.select({
            dbConnection: dbDue√±a,
            table: "envios_logisticainversa",
            where: { didEnvio: shipmentIdFromDataQr },
            select: ["valor"],
        });

        if (rowLogisticaInversa) {
            await LightdataORM.insert({
                dbConnection: db,
                table: "envios_logisticainversa",
                data: {
                    didEnvio: encargadaShipmentId,
                    didCampoLogistica: 1,
                    valor: rowLogisticaInversa.valor,
                },
                quien: userId,
            });
            logBlue("‚Ü©Ô∏è Log√≠stica inversa copiada correctamente");
        }
        const endInv = performance.now();
        logGreen(`üîÅ Log√≠stica inversa en ${(endInv - startInv).toFixed(2)} ms`);

        logBlue(urlEstadosMicroservice);
        /* üß© 10. Actualizar estado en microservicio */
        const startEstado = performance.now();
        await sendShipmentStateToStateMicroserviceAPI({
            urlEstadosMicroservice,
            axiosInstance,
            company,
            userId,
            driverId: userId,
            shipmentId: encargadaShipmentId,
            estado: EstadosEnvio.value(EstadosEnvio.collected, company.did),
            latitude,
            longitude,
            desde: "Colecta App",
        });

        await sendShipmentStateToStateMicroserviceAPI({
            urlEstadosMicroservice,
            axiosInstance,
            company: companyDue√±a,
            userId,
            driverId: driver,
            shipmentId: shipmentIdFromDataQr,
            estado: EstadosEnvio.value(EstadosEnvio.collected, companyDue√±a.did),
            latitude,
            longitude,
            desde: "Colecta App",
        });
        const endEstado = performance.now();
        logGreen(`üö¶ Actualizaci√≥n de estados completada en ${(endEstado - startEstado).toFixed(2)} ms`);

        /* üß© 11. Informe final */
        const startInforme = performance.now();
        const body = await informe({
            db,
            company,
            clientId: rowDue√±aClient.did,
            userId,
        });
        const endInforme = performance.now();
        logGreen(`üìä Informe generado en ${(endInforme - startInforme).toFixed(2)} ms`);

        const totalEnd = performance.now();
        logGreen(`üèÅ [handleExternalNoFlex] Finalizado en ${(totalEnd - globalStart).toFixed(2)} ms`);

        return { success: true, message: "Paquete colectado con √©xito", body };
    } catch (error) {
        logRed(`‚ùå Error en handleExternalNoFlex: ${error.message}`);
        if (error.isAxiosError) throw error;
        throw new CustomException({
            title: "Error al procesar la colecta externa",
            message: error.message || "Error desconocido al procesar la colecta externa.",
        });
    } finally {
        if (dbDue√±a) await dbDue√±a.end();
    }
}
